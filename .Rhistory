startSimDate=as.Date("2003-12-31")
testingCode=FALSE
nTests=2
periodicidad="D"
startDate="1992-01-01"
# CFTC startDate
#startDate="2006-06-13"
# Se cargan las librerías necesarias para las simulaciones:
source("https://raw.githubusercontent.com/OscarVDelatorreTorres/econometricsFunctions/main/libreriasParaSimulaciones.R")
cargaFunciones(preguntar=FALSE)
# Función MSGARCH personal:                                                                                                                                                                                                                                     *
source("https://raw.githubusercontent.com/OscarVDelatorreTorres/msGARCHSimulationFunctions/main/msMCMCGARCHFit.R")
# Conexiones a bases de datos:
rutaBD="/Users/oscardelatorretorres/Dropbox/01 TRABAJO/27basesDatosInvestigacion/02simulacionesMS/01commoditties/"
rutaBD2="/Users/oscardelatorretorres/Dropbox/01 TRABAJO/27basesDatosInvestigacion/01precios/02futures/01agricultural/"
rutaBD3="/Users/oscardelatorretorres/Dropbox/01 TRABAJO/27basesDatosInvestigacion/01precios/01equity/"
# Conexión con base de datos:
connPrecios <- dbConnect(RSQLite::SQLite(), paste0(rutaBD,"wtiSims.db"))
connComm <- dbConnect(RSQLite::SQLite(), paste0(rutaBD2,"commodityFutures.db"))
connIndex <- dbConnect(RSQLite::SQLite(), paste0(rutaBD3,"equityIndexes.db"))
dateSims=as.Date(dbGetQuery(connPrecios,"Select Date from dataSims1D")$Date)
startSimsTime=Sys.time()
simulationsTable=dbGetQuery(connPrecios,"Select * from simRecord")
datos=dbGetQuery(connPrecios,"Select * from dataSims1D")
simulationsTable
b=1
simulationsTable
lastDateSim=as.Date(simulationsTable$endDateD[b])
if (is.na(lastDateSim)){
lastDateSim=as.Date(startSimDate)
}
simRowId=which(dateSims>lastDateSim)
if (isTRUE(testingCode)){N=nTests
} else {
N=length(simRowId)
}
a=1
a=1
lastDateSim=as.Date(simulationsTable$endDateD[b])
if (is.na(lastDateSim)){
lastDateSim=as.Date(startSimDate)
}
simRowId=which(dateSims>lastDateSim)
if (isTRUE(testingCode)){N=nTests
} else {
N=length(simRowId)
}
N
datosSims=datos[1:simRowId[a],]
datosSims$Date=as.Date(datosSims$Date)
Data=datosSims
cat("\f")
print(paste0("Estimating daily MS-GARCH models for date ",a," of ",
length(simRowId),
": ",dateSims[simRowId[a]]," Model: ","(",
b," of ",nrow(simulationsTable),",",simulationsTable$GARCHmodels[b],
",",simulationsTable$pdfFunct[b],", time fixed=",
simulationsTable$timeFixed[b],")"))
# Uses the user-specific made function for MS-GARCH estimation:
# input parameters
garchmodels=eval(parse(text=simulationsTable$GARCHmodels[b]))
pdffunct=eval(parse(text=simulationsTable$pdfFunct[b]))
experimento=eval(parse(text=simulationsTable$Id[b]))
timefixed=eval(parse(text=simulationsTable$timeFixed[b]))
if (timefixed>0){
timefixed=TRUE
} else {
timefixed=FALSE
}
ecuacion=simulationsTable$equation[b]
ecuacion
xecuacion
ecuacion
datosSims
eq=ecuacion,data=datosSims,
ecuacion
eq=ecuacion
data=datosSims
numberMCMC=10000
numberBurn=100
GARCHmodels=garchmodels
experiment=experimento
pdfFunct=pdffunct
timeFixed=timefixed
GARCHmodels
GARCHmodels=c("sGARCH","sGARCH")
pdfFunct
startCalculation=Sys.time()
words <- strsplit(eq, "[^[:alnum:]]+") # Split the string using non-alphanumeric characters as separators
words = words[[1]]
words=words[-1]
num_words <- length(words)
variables=c("(Intercept)",words)
variablesValues=rep(0,num_words)
# Fit the full model
full.model <- lm(eq, data = Data)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both", trace = FALSE)
coeficientesStepWise=summary(step.model)$coefficients
num_VarsStep=nrow(coeficientesStepWise)
name_VarsStep=rownames(coeficientesStepWise)
# Coefficients tbale in DBTable
DBTable=data.frame(
Date=as.character(tail(Data$Date,1)),
Value=step.model$coefficients,
Ticker="factor model coefs",
Experiment=experiment
)
# Forecast in DBTable:
meanForecast=tail(step.model$fitted.values,1)
for (numVar in 1:nrow(DBTable)){
idCoefRow=which(name_VarsStep[numVar]==DBTable$Ticker)
if (length(idCoefRow)>0){
DBTable$Value[idCoefRow]=coeficientesStepWise[numVar]
}
}
if (tail(datos$Return,1)>0){
returnScenarioText="Bullish"
returnScenario=1
} else {
returnScenarioText="Bearish"
returnScenario=-1
}
if (meanForecast>0){
expectedReturnScenarioText="Bullish"
expectedReturnScenario=1
} else {
expectedReturnScenarioText="Bearish"
expectedReturnScenario=-1
}
DBTable=rbind(DBTable,
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=tail(datos$Settle,1),
Ticker="Price at t",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=tail(datos$Return,1),
Ticker="Return at t",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=meanForecast,
Ticker="Return Forecast at t",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=returnScenario,
Ticker="Return scenario",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=returnScenarioText,
Ticker="Return scenario text",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=expectedReturnScenario,
Ticker="Expected return scenario",
Experiment=experiment
),
data.frame(
Date=as.character(tail(Data$Date,1)),
Value=expectedReturnScenarioText,
Ticker="Expected return scenario text",
Experiment=experiment
)
)
# Extract the residuals from the model:
residuals=step.model$residuals
residuals
timeFixed
timeFixed=FALSE
isTRUE(timeFixed)
MSspec=CreateSpec(variance.spec = list(model = GARCHmodels),
distribution.spec = list(distribution = pdfFunct),
switch.spec = list(do.mix = FALSE))
fittedMSGARCHD = tryCatch(FitML(spec = MSspec, data = residuals) ,
error=function(e) NULL)
MSspec
MSspec=CreateSpec(variance.spec = list(model = GARCHmodels),
distribution.spec = list(distribution = pdfFunct),
switch.spec = list(do.mix = FALSE))
MSspec
GARCHmodels
pdfFunct
MSspec=CreateSpec(variance.spec = list(model = GARCHmodels),
distribution.spec = list(distribution = pdfFunct),
switch.spec = list(do.mix = FALSE))
source("https://raw.githubusercontent.com/OscarVDelatorreTorres/econometricsFunctions/main/libreriasParaSimulaciones.R")
cargaFunciones(preguntar=FALSE)
MSspec=CreateSpec(variance.spec = list(model = GARCHmodels),
distribution.spec = list(distribution = pdfFunct),
switch.spec = list(do.mix = FALSE))
source("https://raw.githubusercontent.com/OscarVDelatorreTorres/econometricsFunctions/main/libreriasParaSimulaciones.R")
cargaFunciones(preguntar=FALSE)
evtools::install_github("keblu/MSGARCH", subdir="Package")
devtools::install_github("keblu/MSGARCH", subdir="Package")
devtools::install_github("keblu/MSGARCH", subdir="Package")
install.packages("gfortran")
